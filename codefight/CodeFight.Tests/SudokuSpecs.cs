using System;
using System.Collections.Generic;
using System.Text;
using FluentAssertions;
using Xunit;

namespace CodeFight.Tests
{
    public class SudokuSpecs
    {
        [Fact]
        void should_return_false_for_duplicate_in_the_column()
        {
            var grid = new char[][]
            {
                new []{'5', '.', '.', '1', '4', '.', '.', '2', '.'},
                new []{'.', '.', '6', '.', '.', '.', '.', '.', '.'},
                new []{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                new []{'.', '.', '1', '.', '.', '.', '.', '.', '.'},
                new []{'5', '6', '7', '.', '.', '.', '.', '.', '9'},
                new []{'.', '.', '.', '.', '.', '.', '8', '1', '.'},
                new []{'.', '3', '.', '.', '.', '.', '.', '.', '6'},
                new []{'.', '.', '.', '.', '.', '7', '.', '.', '.'},
                new []{'.', '.', '.', '5', '.', '.', '.', '7', '.'}
            };

            new Sudoku().sudoku2(grid).Should().BeFalse();
        }

        [Fact]
        void should_return_false_for_duplicate_in_the_row()
        {
            var grid = new char[][]
            {
                new []{'.', '.', '.', '1', '4', '4', '.', '2', '.'},
                new []{'.', '.', '6', '.', '.', '.', '.', '.', '.'},
                new []{'5', '.', '.', '.', '.', '.', '.', '.', '.'},
                new []{'5', '.', '1', '.', '.', '.', '.', '.', '.'},
                new []{'.', '6', '7', '.', '.', '.', '.', '.', '9'},
                new []{'.', '.', '.', '.', '.', '.', '8', '1', '.'},
                new []{'.', '3', '.', '.', '.', '.', '.', '.', '6'},
                new []{'.', '.', '.', '.', '.', '7', '.', '.', '.'},
                new []{'.', '.', '.', '5', '.', '5', '.', '7', '.'}
            };

            new Sudoku().sudoku2(grid).Should().BeFalse();
        }

        [Fact]
        void should_return_true_for_valid_sudoku()
        {
            var grid = new char[][]
            {
                new []{'.', '.', '.', '1', '4', '.', '.', '2', '.'},
                new []{'.', '.', '6', '.', '.', '.', '.', '.', '.'},
                new []{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
                new []{'.', '.', '1', '.', '.', '.', '.', '.', '.'},
                new []{'.', '6', '7', '.', '.', '.', '.', '.', '9'},
                new []{'.', '.', '.', '.', '.', '.', '8', '1', '.'},
                new []{'.', '3', '.', '.', '.', '.', '.', '.', '6'},
                new []{'.', '.', '.', '.', '.', '7', '.', '.', '.'},
                new []{'.', '.', '.', '5', '.', '.', '.', '7', '.'}
            };

            new Sudoku().sudoku2(grid).Should().BeTrue();
        }

        [Fact]
        void should_return_false_for_imvalid_sudoku()
        {
            var grid = new char[][]
            {
                new []{'.', '.', '.', '.', '2', '.', '.', '9', '.'},
                new []{'.', '.', '.', '.', '6', '.', '.', '.', '.'},
                new []{'7', '1', '.', '.', '7', '5', '.', '.', '.'},
                new []{'.', '7', '.', '.', '.', '.', '.', '.', '.'},
                new []{'.', '.', '.', '.', '8', '3', '.', '.', '.'},
                new []{'.', '.', '8', '.', '.', '7', '.', '6', '.'},
                new []{'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                new []{'.', '1', '.', '2', '.', '.', '.', '.', '.'},
                new []{'.', '2', '.', '.', '3', '.', '.', '.', '.'}
            };

            new Sudoku().sudoku2(grid).Should().BeFalse();
        }
    }
}
